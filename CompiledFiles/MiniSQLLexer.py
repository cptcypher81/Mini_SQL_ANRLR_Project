# Generated from MiniSQL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,181,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,5,22,145,8,22,10,22,12,
        22,148,9,22,1,23,4,23,151,8,23,11,23,12,23,152,1,24,1,24,5,24,157,
        8,24,10,24,12,24,160,9,24,1,24,1,24,1,25,4,25,165,8,25,11,25,12,
        25,166,1,25,1,25,1,26,1,26,1,26,1,26,5,26,175,8,26,10,26,12,26,178,
        9,26,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,6,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,39,39,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,185,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,
        55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,63,1,0,0,0,11,
        65,1,0,0,0,13,67,1,0,0,0,15,70,1,0,0,0,17,72,1,0,0,0,19,75,1,0,0,
        0,21,77,1,0,0,0,23,80,1,0,0,0,25,87,1,0,0,0,27,94,1,0,0,0,29,99,
        1,0,0,0,31,106,1,0,0,0,33,113,1,0,0,0,35,118,1,0,0,0,37,124,1,0,
        0,0,39,131,1,0,0,0,41,135,1,0,0,0,43,139,1,0,0,0,45,142,1,0,0,0,
        47,150,1,0,0,0,49,154,1,0,0,0,51,164,1,0,0,0,53,170,1,0,0,0,55,56,
        5,59,0,0,56,2,1,0,0,0,57,58,5,42,0,0,58,4,1,0,0,0,59,60,5,44,0,0,
        60,6,1,0,0,0,61,62,5,40,0,0,62,8,1,0,0,0,63,64,5,41,0,0,64,10,1,
        0,0,0,65,66,5,61,0,0,66,12,1,0,0,0,67,68,5,33,0,0,68,69,5,61,0,0,
        69,14,1,0,0,0,70,71,5,60,0,0,71,16,1,0,0,0,72,73,5,60,0,0,73,74,
        5,61,0,0,74,18,1,0,0,0,75,76,5,62,0,0,76,20,1,0,0,0,77,78,5,62,0,
        0,78,79,5,61,0,0,79,22,1,0,0,0,80,81,5,83,0,0,81,82,5,69,0,0,82,
        83,5,76,0,0,83,84,5,69,0,0,84,85,5,67,0,0,85,86,5,84,0,0,86,24,1,
        0,0,0,87,88,5,73,0,0,88,89,5,78,0,0,89,90,5,83,0,0,90,91,5,69,0,
        0,91,92,5,82,0,0,92,93,5,84,0,0,93,26,1,0,0,0,94,95,5,73,0,0,95,
        96,5,78,0,0,96,97,5,84,0,0,97,98,5,79,0,0,98,28,1,0,0,0,99,100,5,
        86,0,0,100,101,5,65,0,0,101,102,5,76,0,0,102,103,5,85,0,0,103,104,
        5,69,0,0,104,105,5,83,0,0,105,30,1,0,0,0,106,107,5,68,0,0,107,108,
        5,69,0,0,108,109,5,76,0,0,109,110,5,69,0,0,110,111,5,84,0,0,111,
        112,5,69,0,0,112,32,1,0,0,0,113,114,5,70,0,0,114,115,5,82,0,0,115,
        116,5,79,0,0,116,117,5,77,0,0,117,34,1,0,0,0,118,119,5,87,0,0,119,
        120,5,72,0,0,120,121,5,69,0,0,121,122,5,82,0,0,122,123,5,69,0,0,
        123,36,1,0,0,0,124,125,5,85,0,0,125,126,5,80,0,0,126,127,5,68,0,
        0,127,128,5,65,0,0,128,129,5,84,0,0,129,130,5,69,0,0,130,38,1,0,
        0,0,131,132,5,83,0,0,132,133,5,69,0,0,133,134,5,84,0,0,134,40,1,
        0,0,0,135,136,5,65,0,0,136,137,5,78,0,0,137,138,5,68,0,0,138,42,
        1,0,0,0,139,140,5,79,0,0,140,141,5,82,0,0,141,44,1,0,0,0,142,146,
        7,0,0,0,143,145,7,1,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,
        1,0,0,0,146,147,1,0,0,0,147,46,1,0,0,0,148,146,1,0,0,0,149,151,7,
        2,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,
        0,0,0,153,48,1,0,0,0,154,158,5,39,0,0,155,157,8,3,0,0,156,155,1,
        0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,
        0,0,0,160,158,1,0,0,0,161,162,5,39,0,0,162,50,1,0,0,0,163,165,7,
        4,0,0,164,163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,
        0,0,0,167,168,1,0,0,0,168,169,6,25,0,0,169,52,1,0,0,0,170,171,5,
        45,0,0,171,172,5,45,0,0,172,176,1,0,0,0,173,175,8,5,0,0,174,173,
        1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,179,
        1,0,0,0,178,176,1,0,0,0,179,180,6,26,0,0,180,54,1,0,0,0,6,0,146,
        152,158,166,176,1,6,0,0
    ]

class MiniSQLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    SELECT = 12
    INSERT = 13
    INTO = 14
    VALUES = 15
    DELETE = 16
    FROM = 17
    WHERE = 18
    UPDATE = 19
    SET = 20
    AND = 21
    OR = 22
    IDENTIFIER = 23
    NUMBER = 24
    STRING = 25
    WS = 26
    COMMENT = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'*'", "','", "'('", "')'", "'='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'SELECT'", "'INSERT'", "'INTO'", "'VALUES'", 
            "'DELETE'", "'FROM'", "'WHERE'", "'UPDATE'", "'SET'", "'AND'", 
            "'OR'" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "INSERT", "INTO", "VALUES", "DELETE", "FROM", "WHERE", 
            "UPDATE", "SET", "AND", "OR", "IDENTIFIER", "NUMBER", "STRING", 
            "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "SELECT", "INSERT", "INTO", 
                  "VALUES", "DELETE", "FROM", "WHERE", "UPDATE", "SET", 
                  "AND", "OR", "IDENTIFIER", "NUMBER", "STRING", "WS", "COMMENT" ]

    grammarFileName = "MiniSQL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


